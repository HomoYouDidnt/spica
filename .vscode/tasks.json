{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "setup",
      "type": "shell",
      "command": "uv sync --dev --extra cpu"
    },
    {
      "label": "lint",
      "type": "shell",
      "command": "uvx ruff check ."
    },
    {
      "label": "validate",
      "type": "shell",
      "command": "uvx ruff check . && uvx black --check spica && uv run pytest -q --maxfail=1",
      "options": {
        "env": {
          "PYTHONUTF8": "1",
          "NANOCHAT_BASE_DIR": "${workspaceFolder}/.cache/nanochat",
          "PYTHONPATH": "${workspaceFolder}"
        }
      }
    },
    {
      "label": "run demo",
      "type": "shell",
      "command": "uv run python -m spica.demo --pipeline configs/pipelines/local.yaml",
      "options": {
        "env": {
          "PYTHONUTF8": "1",
          "PYTHONPATH": "${workspaceFolder}"
        }
      }
    },
    {
      "label": "tail telemetry",
      "type": "shell",
      "command": "type spica.telemetry.jsonl"
    },
    {
      "label": "shadow (sample)",
      "type": "shell",
      "command": "uv"
    },
    {
      "label": "promotion: build (sample)",
      "type": "shell",
      "command": "uv"
    },
    {
      "label": "baseline (gold)",
      "type": "shell",
      "command": "uv"
    },
    {
      "label": "pipeline: activate (tags)",
      "type": "shell",
      "command": "uv"
    },
    {
      "label": "pipeline: rollback (baseline)",
      "type": "shell",
      "command": "uv"
    },
    {
      "label": "promotion: candidate (gold+fresh)",
      "dependsOn": [
        "shadow (sample)",
        "promotion: build (sample)"
      ],
      "dependsOrder": "sequence"
    },
    {
      "label": "queue: demo",
      "type": "shell",
      "command": "uv",
      "args": [
        "run",
        "python",
        "-c",
        "from tools.queue_runner import QueueRunner; q=QueueRunner(); q.submit('eval:shadow@gold', lambda: None, 10); q.submit('explore:mutate@1', lambda: None, 1); q.run(5.0)"
      ]
    },
    {
      "label": "queue: shadow (sample)",
      "type": "shell",
      "command": "uv",
      "args": [
        "run",
        "python",
        "-c",
        "from tools.queue_runner import QueueRunner, submit_shadow_job; q=QueueRunner(); submit_shadow_job(q,name='eval:shadow@sample',pipeline='configs/pipelines/local.yaml',input_path='samples/sanitized.qarg.jsonl',out_path='shadow.metrics.json',limit=1000,priority=10); q.run(60)"
      ]
    },
    {
      "label": "queue: baseline+fresh",
      "type": "shell",
      "command": "uv",
      "args": [
        "run",
        "python",
        "-c",
        "from tools.queue_runner import QueueRunner, submit_dual_shadow_jobs; q=QueueRunner(); submit_dual_shadow_jobs(q,pipeline='configs/pipelines/local.yaml',gold_input='samples/gold.qarg.jsonl',fresh_input='samples/sanitized.qarg.jsonl'); q.run(180)"
      ]
    },
    {
      "label": "promotion: candidate (queue)",
      "dependsOn": [
        "queue: baseline+fresh",
        "promotion: build (sample)"
      ],
      "dependsOrder": "sequence",
      "type": "shell",
      "command": "echo Promotion candidate queued -> baseline + fresh + bundle complete"
    }
  ]
}